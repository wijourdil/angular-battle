var Board=function e(){var n=e.init();this.cases=n.cases,this.playerCastle=$("#bottom-castle"),this.ennemyCastle=$("#top-castle")};Board.initCases=function(){for(var e=[],n=0;n<window.nbColumns*window.nbLines;n++){var t=n%window.nbColumns,s=Math.floor(n/window.nbColumns),s=new Case(n,t,s);e.push(s)}return e},Board.init=function(){return{cases:Board.initCases()}},$.extend(Board.prototype,{log:function(){console.log(this)},discover:function(e,n,t){e=window.nbColumns*n+e;this.cases[e].discover(t)},getDiscoveredCases:function(){var e,n=[];for(e in this.cases)this.cases[e].playerDiscovered&&n.push(this.cases[e]);return n},getPosableCases:function(e){var n,t=[];for(n in null==e&&(e=!1),this.cases){var s=!e&&this.cases[n].playerDiscovered,i=e&&this.cases[n].enemyDiscovered;(s||i)&&this.cases[n].isEmpty(!e)&&t.push(this.cases[n])}return t},getChampionsCases:function(e){var n,t=[];for(n in this.cases){var s,i,a=this.cases[n];a.isEmpty(e)||(s=e&&a.playerDiscovered&&!a.contains.isEnemy,i=!e&&a.enemyDiscovered&&a.contains.isEnemy,(s||i)&&"Champion"==a.contains.type&&t.push(a))}return t},populate:function(e,n,t){e.isEmpty(t)&&(t||(n.isEnemy=!0),e.contains=n,window.engine.log("Le joueur invoque "+n.type+" "+n.name+"."),n.canSee()&&this.discoverCasesAround(e,t))},getCase:function(e,n){n=window.nbColumns*n+e,n=this.cases[n];return n&&1<Math.abs(e-n.col)?null:n},discoverCasesAround:function(e,n){var t=this.getCase(e.col,e.row-1),s=this.getCase(e.col,e.row+1),i=this.getCase(e.col+1,e.row),a=this.getCase(e.col-1,e.row);e.discover(!n),t&&t.discover(!n),s&&s.discover(!n),a&&a.discover(!n),i&&i.discover(!n)},unselectCases:function(){for(var e in this.cases)this.cases[e].isSelectable&&(this.cases[e].isSelectable=!1)},getEmptyCasesAround:function(e){var n=[],t=window.engine.isPlayerTurn(),s=this.getCase(e.col,e.row-1),i=this.getCase(e.col,e.row+1),a=this.getCase(e.col+1,e.row),e=this.getCase(e.col-1,e.row);return null!=s&&s.isEmpty(t)&&n.push(s),null!=i&&i.isEmpty(t)&&n.push(i),null!=e&&e.isEmpty(t)&&n.push(e),null!=a&&a.isEmpty(t)&&n.push(a),n},moveMonsters:function(e){for(var n in this.cases){var t,s,i=this.cases[n];!i.isEmpty(e)&&"Monstre"==i.contains.type&&i.contains.canMove&&(t=this.getEmptyCasesAround(i),.5<Math.random()&&0<t.length&&(s=window.engine.random(t.length),n=i.contains,i.contains=null,n.canMove=!1,t[s].contains=n,this.discoverCasesAround(t[s],!n.isEnemy)))}},makeMonstersAttack:function(e){for(var n in this.cases){var t,s,i=this.cases[n];i.isEmpty(e)||"Monstre"!=i.contains.type||0<(t=this.getEnemiesAround(i)).length&&((n=t[s=Math.floor(1e3*Math.random()%t.length)].contains).attackedBy(i.contains),window.engine.log(i.contains.name+(i.contains.isEnemy?" ennemi":"")+" attaque "+n.name+(n.isEnemy?" ennemi":"")+" : "+i.contains.atk+" dégâts."),n.isDead()&&(window.engine.log(n.name+(n.isEnemy?" ennemi":"")+" est mort."),t[s].contains=null))}},getEnemiesAround:function(e){var n,t=this.getAroundCases(e),s=window.engine.isPlayerTurn(),i=[];for(n in t)!t[n].isEmpty(s)&&t[n].contains.isAttackable()&&t[n].contains.isEnemy!=e.contains.isEnemy&&i.push(t[n]);return i},getAroundCases:function(e){var n=this.getCase(e.col,e.row-1),t=this.getCase(e.col,e.row+1),s=this.getCase(e.col+1,e.row),i=this.getCase(e.col-1,e.row),e=[];return null!=n&&e.push(n),null!=t&&e.push(t),null!=s&&e.push(s),null!=i&&e.push(i),e},getMonstersCases:function(){var e,n=[],t=window.engine.isPlayerTurn();for(e in this.cases){var s=this.cases[e];s.isEmpty(t)||"Monstre"!=s.contains.type||n.push(this.cases[e])}return n},getAttackableCases:function(e){var n,t=[],s=this.getAroundCases(e),i=window.engine.isPlayerTurn();for(n in s){var a=s[n];a.playerDiscovered&&!a.isEmpty(i)&&a.contains.isEnemy&&t.push(a)}return t},playerHasChampions:function(){return 0<this.getChampionsCases(!0).length},hasMoreAvailCasesThan:function(e){var n,t=0,s=window.engine.isPlayerTurn();for(n in this.cases)this.cases[n].isEmpty(s)&&this.cases[n].playerDiscovered&&t++;return e<t}});var Case=function e(n,t,s){s=e.init(n,t,s);this.playerDiscovered=!1,this.enemyDiscovered=!1,this.isSelectable=!1,this.contains=null,this.id=s.id,this.element=s.element,this.col=s.col,this.row=s.row};Case.init=function(e,n,t){if(isNaN(t)||t<0||t>window.nbLines)throw new Error("This value for Case row number is not valid ("+t+").");if(isNaN(n)||n<0||n>window.nbColumns)throw new Error("This value for Case column number is not valid ("+n+").");if(isNaN(n)||e<0||e>window.nbColumns*t+n)throw new Error("This value for Case id is not valid (id: "+e+", col: "+n+", row: "+t+").");return{id:e,element:$("#cell-"+e),col:n,row:t}},$.extend(Case.prototype,{log:function(){console.log(this)},isEmpty:function(e){e=null!=this.contains&&"Piège"==this.contains.type&&this.contains.type.isEnemy==e;return null==this.contains||e},discover:function(e){e?this.enemyDiscovered=!0:(this.element.addClass("discovered"),this.playerDiscovered=!0)},setSelectable:function(){this.isSelectable=!0}});var Engine=function e(){var n=e.init();this.board=n.board,this.player=n.player1,this.ennemy=n.player2,this.turn={player:!0,step:0},this.steps={0:"Piocher",1:"Décompter pièges actifs",2:"Déplacer monstres",3:"Jouer combats",4:"Activer / Défausser cartes (5 max.)"},this.activeStep=this.steps[0],this.playingCard=null,this.movingChampionCase=null,this.attackingElement=null,this.logs=[]};Engine.init=function(){return{board:new Board,player1:new Player,player2:new Player}},$.extend(Engine.prototype,{log:function(e){null==e?console.log(this):this.logs.unshift(e)},random:function(e){return null==e&&(e=1e3),Math.floor(1e3*Math.random())%e},incrementStep:function(){this.turn.step++,this.activeStep=this.steps[this.turn.step],1==this.turn.step&&this.incrementStep(),2==this.turn.step&&(this.board.moveMonsters(this.isPlayerTurn()),this.incrementStep()),3==this.turn.step&&(this.board.makeMonstersAttack(this.isPlayerTurn()),this.incrementStep())},endTurn:function(){var e,n=this.board.getMonstersCases();for(e in n)n[e].contains.canMove=!0;this.turn.step=0,this.activeStep=this.steps[0],this.turn.player=!this.turn.player,0==this.turn.player&&(this.log("Fin du tour du joueur."),this.launchIA())},launchIA:function(){this.log("Début du tour de l'IA."),this.ennemy.draw(),this.log("L'IA a pioché."),this.incrementStep();var e=this.ennemy.getChampions(),n=this.ennemy.getMonsters(),t=e.concat(n);for(m in t){var s=t[m];this.playCard(s);var i=this.board.getPosableCases(!0),i=i[this.random(i.length)];this.invoke(i),this.trashCard(s)}var a=this.ennemy.getMoves();for(m in a){s=a[m];if(0==(u=this.board.getChampionsCases(this.turn.player)).length)break;var o=u[this.random(u.length)];for(this.playCard(s),this.activateCardEffect(o);null!=this.movingChampionCase;){var r=this.board.getEmptyCasesAround(this.movingChampionCase),r=r[this.random(r.length)];this.moveChampion(r)}this.trashCard(s)}var h=this.ennemy.getBoosts();for(m in h){var u,s=h[m];if(0==(u=this.board.getChampionsCases(this.turn.player)).length)break;var c=u[this.random(u.length)];this.playCard(s),this.activateCardEffect(c),this.trashCard(s)}var l=this.ennemy.getGrandesPotions();for(m in l){var p=l[m];for(m in(d=this.board.getChampionsCases()).sort(function(e,n){return e.contains.getLifePercentage()==n.contains.getLifePercentage()?e.contains.pv>n.contains.pv:e.contains.getLifePercentage()>n.contains.getLifePercentage()}),d)if(d[m].contains.getLifePercentage()<25){this.playCard(p),this.activateCardEffect(d[m]),this.trashCard(p);break}}for(m in l=this.ennemy.getSimplesPotions()){var d,m,p=l[m];for(m in(d=this.board.getChampionsCases()).sort(function(e,n){return e.contains.getLifePercentage()==n.contains.getLifePercentage()?e.contains.pv>n.contains.pv:e.contains.getLifePercentage()>n.contains.getLifePercentage()}),d)if(d[m].contains.getLifePercentage()<50){this.playCard(p),this.activateCardEffect(d[m]),this.trashCard(p);break}}this.movingChampionCase=null,this.attackingElement=null,this.playingCard=null,this.endTurn(),this.log("Fin du tour de l'IA."),this.log("Début du tour du joueur.")},playCard:function(e){var n,t=[];for(n in(this.playingCard=e).isPosable()?t=this.board.getPosableCases():e.isUsable()&&(t=this.board.getChampionsCases(this.turn.player)),t)t[n].setSelectable()},trashCard:function(e){var n="ennemy",e=this[n=this.turn.player?"player":n].hand.indexOf(e),e=this[n].hand.splice(e,1)[0];this[n].trash.unshift(e)},invoke:function(e){this.board.populate(e,this.playingCard,this.turn.player),this.board.unselectCases(),this.playingCard=null},activateCardEffect:function(e){if("Déplacement"==this.playingCard.type){for(t in this.board.unselectCases(),n=this.board.getEmptyCasesAround(e))n[t].setSelectable();this.movingChampionCase=e}else if("Objet"==this.playingCard.type)this.playingCard.use(e.contains),this.playingCard=null,this.board.unselectCases();else if("Attaque"==this.playingCard.type){var n,t;for(t in this.board.unselectCases(),n=this.board.getAttackableCases(e))n[t].setSelectable();this.attackingElement=e.contains,this.playingCard=null}},moveChampion:function(e){var n=this.movingChampionCase.contains;this.movingChampionCase.contains=null,e.contains=n,this.board.discoverCasesAround(e,this.turn.player),this.playingCard.value--,0==this.playingCard.value?(this.playingCard=null,this.movingChampionCase=null,this.board.unselectCases()):this.activateCardEffect(e)},attackEnemy:function(e){e.contains.attackedBy(this.attackingElement),this.log(this.attackingElement.name+" attaque "+e.contains.name+" ennemi : "+this.attackingElement.atk+" points de dégâts."),e.contains.isDead()&&(e.contains=null),this.attackingElement=null,this.board.unselectCases()},canPlay:function(e){return!(e.isUsable()&&!this.board.playerHasChampions())&&!("Piège"==e.type&&!this.board.hasMoreAvailCasesThan(1))},isPlayerTurn:function(){return this.turn.player}});var Player=function e(){var n=e.init();this.deck=n.deck,this.hand=n.hand,this.trash=[]};Player.initDeck=function(){var e=[];return e.push(new Champion("Tank")),e.push(new Champion("Tank")),e.push(new Champion("Mage")),e.push(new Champion("Mage")),e.push(new Champion("Chevalier")),e.push(new Champion("Chevalier")),e.push(new Monster("Dragon")),e.push(new Monster("Dragon")),e.push(new Monster("Gobelin")),e.push(new Monster("Gobelin")),e.push(new Monster("Gobelin")),e.push(new Monster("Gobelin")),e.push(new Monster("Gobelin")),e.push(new Monster("Golem")),e.push(new Monster("Golem")),e.push(new Monster("Golem")),e.push(new Trap("Simple")),e.push(new Trap("Simple")),e.push(new Trap("Simple")),e.push(new Trap("Simple")),e.push(new Trap("Simple")),e.push(new Trap("Normal")),e.push(new Trap("Normal")),e.push(new Trap("Normal")),e.push(new Trap("Complexe")),e.push(new Trap("Complexe")),e.push(new Item("Potion")),e.push(new Item("Potion")),e.push(new Item("Potion")),e.push(new Item("Grande Potion")),e.push(new Item("Grande Potion")),e.push(new Item("Boost")),e.push(new Item("Boost")),e.push(new Item("Boost")),e.push(new Item("Grand Boost")),e.push(new Item("Grand Boost")),e.push(new Move(1)),e.push(new Move(1)),e.push(new Move(1)),e.push(new Move(1)),e.push(new Move(1)),e.push(new Move(1)),e.push(new Move(1)),e.push(new Move(1)),e.push(new Move(1)),e.push(new Move(1)),e.push(new Move(1)),e.push(new Move(1)),e.push(new Move(2)),e.push(new Move(2)),e.push(new Move(2)),e.push(new Move(2)),e.push(new Move(2)),e.push(new Move(3)),e.push(new Move(3)),e.push(new Move(3)),e.push(new Move(3)),e.push(new Move(4)),e.push(new Move(4)),e.push(new Move(5)),e.push(new Attack),e.push(new Attack),e.push(new Attack),e.push(new Attack),e.push(new Attack),e.push(new Attack),e.push(new Attack),e.push(new Attack),e.push(new Attack),e.push(new Attack),e.push(new Attack),e.push(new Attack),e.push(new Attack),e.push(new Attack),e.push(new Attack),e.push(new Attack),e.push(new Attack),e.push(new Attack),e.push(new Attack),e.push(new Attack),e},Player.shuffle=function(e){for(var n,t,s=e.length;s;n=Math.floor(Math.random()*s),t=e[--s],e[s]=e[n],e[n]=t);return e},Player.init=function(){for(var e=Player.shuffle(Player.initDeck()),n=[],t=0;t<5;t++)n.push(e.pop());return{deck:e,hand:n}},$.extend(Player.prototype,{log:function(){console.log(this)},draw:function(){var e=this.deck.pop();this.hand.push(e)},getCards:function(e){var n,t=[];for(n in this.hand)this.hand[n].type==e&&t.push(this.hand[n]);return t},getChampions:function(){return this.getCards("Champion")},getMonsters:function(){return this.getCards("Monstre")},getMoves:function(){return this.getCards("Déplacement")},getBoosts:function(){var e,n=[];for(e in this.hand)"Boost"!=this.hand[e].name&&"Grand Boost"!=this.hand[e].name||n.push(this.hand[e]);return n},getSimplesPotions:function(){var e,n=[];for(e in this.hand)"Potion"==this.hand[e].name&&n.push(this.hand[e]);return n},getGrandesPotions:function(){var e,n=[];for(e in this.hand)"Grande Potion"==this.hand[e].name&&n.push(this.hand[e]);return n}});